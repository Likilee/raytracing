
# 5. Perlin 노이즈


멋지게 보이는 단단한 질감을 얻기 위해 대부분의 사람들은 Perlin 노이즈를 사용합니다. 이들은 발명가 Ken Perlin의 이름을 따서 명명되었습니다. Perlin 텍스처는 다음과 같은 백색 노이즈를 반환하지 않습니다.


[![img](https://raytracing.github.io/images/img-2.04-white-noise.jpg)](https://raytracing.github.io/images/img-2.04-white-noise.jpg)

*이미지 4 : 백색 잡음*


대신 흐림이 적용된 백색 잡음과 비슷한 것을 반환합니다.


[![img](https://raytracing.github.io/images/img-2.05-white-noise-blurred.jpg)](https://raytracing.github.io/images/img-2.05-white-noise-blurred.jpg)

*이미지 5 : 백색 잡음, 흐릿함*


Perlin 노이즈의 핵심 부분은 반복 가능하다는 것입니다. 3D 포인트를 입력으로 사용하고 항상 동일한 임의의 숫자를 반환합니다. 주변 지점은 비슷한 숫자를 반환합니다. Perlin 노이즈의 또 다른 중요한 부분은 간단하고 빠르므로 일반적으로 해킹으로 수행됩니다. Andrew Kensler의 설명에 따라 점진적으로 해킹을 구축하겠습니다.


## 5.1 난수 블록 사용

난수의 3D 배열로 모든 공간을 타일링하고 블록으로 사용할 수 있습니다. 반복이 명확한 곳에서 무언가를 얻습니다.

[![img](https://raytracing.github.io/images/img-2.06-tile-random.jpg)](https://raytracing.github.io/images/img-2.06-tile-random.jpg)

*이미지 6 : 바둑판 식 무작위 패턴*

타일링 대신 일종의 해싱을 사용하여이를 스크램블 해 보겠습니다. 이 모든 것을 가능하게하는 약간의 지원 코드가 있습니다.


```cpp
#ifndef PERLIN_H
#define PERLIN_H

#include "rtweekend.h"

class perlin {
    public:
        perlin() {
            ranfloat = new double[point_count];
            for (int i = 0; i < point_count; ++i) {
                ranfloat[i] = random_double();
            }

            perm_x = perlin_generate_perm();
            perm_y = perlin_generate_perm();
            perm_z = perlin_generate_perm();
        }

        ~perlin() {
            delete[] ranfloat;
            delete[] perm_x;
            delete[] perm_y;
            delete[] perm_z;
        }

        double noise(const point3& p) const {
            auto i = static_cast<int>(4*p.x()) & 255;
            auto j = static_cast<int>(4*p.y()) & 255;
            auto k = static_cast<int>(4*p.z()) & 255;

            return ranfloat[perm_x[i] ^ perm_y[j] ^ perm_z[k]];
        }

    private:
        static const int point_count = 256;
        double* ranfloat;
        int* perm_x;
        int* perm_y;
        int* perm_z;

        static int* perlin_generate_perm() {
            auto p = new int[point_count];

            for (int i = 0; i < perlin::point_count; i++)
                p[i] = i;

            permute(p, point_count);

            return p;
        }

        static void permute(int* p, int n) {
            for (int i = n-1; i > 0; i--) {
                int target = random_int(0, i);
                int tmp = p[i];
                p[i] = p[target];
                p[target] = tmp;
            }
        }
};

#endif
```

**목록 29 :** [perlin.h] Perlin 텍스처 클래스 및 함수



이제 0과 1 사이의 플로트를 가져와 회색 색상을 만드는 실제 텍스처를 만드는 경우 :


```cpp
#include "perlin.h"

class noise_texture : public texture {
    public:
        noise_texture() {}

        virtual color value(double u, double v, const point3& p) const override {
            return color(1,1,1) * noise.noise(p);
        }

    public:
        perlin noise;
};
```

**목록 30 :** [texture.h] 노이즈 텍스처



이 텍스처를 일부 구체에 사용할 수 있습니다.

```cpp
hittable_list two_perlin_spheres() {
    hittable_list objects;

    auto pertext = make_shared<noise_texture>();
    objects.add(make_shared<sphere>(point3(0,-1000,0), 1000, make_shared<lambertian>(pertext)));
    objects.add(make_shared<sphere>(point3(0, 2, 0), 2, make_shared<lambertian>(pertext)));

    return objects;
}
```

**목록 31 :** [main.cc] 두 개의 Perlin 텍스처 구가있는 장면


이전과 유사한 장면 설정 :


```cpp
int main() {
    ...
    switch (0) {
        ...
        default:        case 2:
            ...

        default:
        case 3:
            world = two_perlin_spheres();
            lookfrom = point3(13,2,3);
            lookat = point3(0,0,0);
            vfov = 20.0;
            break;    }
    ...
```

**목록 32 :** [main.cc] 매개 변수보기


해싱을 추가하면 원하는대로 스크램블됩니다.


[![img](https://raytracing.github.io/images/img-2.07-hash-random.png)](https://raytracing.github.io/images/img-2.07-hash-random.png)

*이미지 7 : 해시 된 임의 텍스처*





## 5.2 결과 다듬기



매끄럽게 만들기 위해 선형으로 보간 할 수 있습니다.



```cpp
class perlin {
    public:
        ...
        double noise(point3 vec3& p) const {
            /* 추가 */
            auto u = p.x() - floor(p.x());
            auto v = p.y() - floor(p.y());
            auto w = p.z() - floor(p.z());

            auto i = static_cast<int>(floor(p.x()));
            auto j = static_cast<int>(floor(p.y()));
            auto k = static_cast<int>(floor(p.z()));
            double c[2][2][2];

            for (int di=0; di < 2; di++)
                for (int dj=0; dj < 2; dj++)
                    for (int dk=0; dk < 2; dk++)
                        c[di][dj][dk] = ranfloat[
                            perm_x[(i+di) & 255] ^
                            perm_y[(j+dj) & 255] ^
                            perm_z[(k+dk) & 255]
                        ];

            return trilinear_interp(c, u, v, w);
            /*******/
        }
        ...
    private:
        ...
        /* 추가 */
        static double trilinear_interp(double c[2][2][2], double u, double v, double w) {
            auto accum = 0.0;
            for (int i=0; i < 2; i++)
                for (int j=0; j < 2; j++)
                    for (int k=0; k < 2; k++)
                        accum += (i*u + (1-i)*(1-u))*
                                (j*v + (1-j)*(1-v))*
                                (k*w + (1-k)*(1-w))*c[i][j][k];

            return accum;
        }
        /*******/
    }
```

**목록 33 :** [perlin.h] trilienear 보간을 사용한 Perlin

결과 :

[![img](https://raytracing.github.io/images/img-2.08-perlin-trilerp.png)](https://raytracing.github.io/images/img-2.08-perlin-trilerp.png)

*이미지 8 : 삼선 형 보간을 사용한 Perlin 텍스처*


## 5.3 Hermitian Smoothing으로 개선

평활화는 개선 된 결과를 산출하지만 거기에는 명백한 그리드 기능이 있습니다. 그중 일부는 색상의 선형 보간의 알려진 지각 인공물 인 마하 밴드입니다. 표준 트릭은 보간을 반올림하기 위해 Hermite 큐빅을 사용하는 것입니다.


```cpp
class perlin (
    public:
        ...
        double noise(const point3& p) const {
            auto u = p.x() - floor(p.x());
            auto v = p.y() - floor(p.y());
            auto w = p.z() - floor(p.z());

            /* 수정 */
            u = u*u*(3-2*u);
            v = v*v*(3-2*v);
            w = w*w*(3-2*w);
            /*******/
            auto i = static_cast<int>(floor(p.x()));
            auto j = static_cast<int>(floor(p.y()));
            auto k = static_cast<int>(floor(p.z()));
            ...
```

**목록 34 :** [perlin.h] Perlin 스무딩


이것은 더 매끄럽게 보이는 이미지를 제공합니다.


[![img](https://raytracing.github.io/images/img-2.09-perlin-trilerp-smooth.png)](https://raytracing.github.io/images/img-2.09-perlin-trilerp-smooth.png)

*이미지 9 : Perlin 텍스처, 삼선 형 보간, 스무딩*


## 5.4 주파수 조정

또한 약간 낮은 주파수입니다. 입력 포인트의 크기를 조정하여 더 빠르게 변경할 수 있습니다.

```cpp
class noise_texture : public texture {
    public:
        noise_texture() {}
        /* 수정 */
        noise_texture(double sc) : scale(sc) {}
        /*******/
        virtual color value(double u, double v, const point3& p) const override {
            /* 수정 */
            return color(1,1,1) * noise.noise(scale * p);
            /*******/
        }

    public:
        perlin noise;
        /* 추가 */
        double scale;
        /*******/
    };
```

**목록 35 :** [texture.h] Perlin 평활화, 더 높은 빈도

그런 다음 해당 배율을 `two_perlin_spheres()`장면 설명에 추가합니다 .


```cpp
hittable_list two_perlin_spheres() {
    hittable_list objects;

    /* 추가 */
    auto pertext = make_shared<noise_texture>(4);
    /*******/
    objects.add(make_shared<sphere>(point3(0,-1000,0), 1000, make_shared<lambertian>(pertext)));
    objects.add(make_shared<sphere>(point3(0, 2, 0), 2, make_shared<lambertian>(pertext)));

    return objects;
}
```

**Listing 36 :** [main.cc] 노이즈에 대한 스케일이있는 Perlin 텍스처 구체


다음을 제공합니다 :


[![img](https://raytracing.github.io/images/img-2.10-perlin-hifreq.png)](https://raytracing.github.io/images/img-2.10-perlin-hifreq.png)

*이미지 10 : Perlin 텍스처, 더 높은 빈도*


## 5.5 격자 점에서 랜덤 벡터 사용


패턴의 최소값과 최대 값이 항상 정수 x / y / z에 정확히 위치하기 때문에 이것은 여전히 ​​약간 뭉툭한 모양입니다. Ken Perlin의 매우 영리한 트릭은 격자 점에 부동 단위 벡터 대신 임의의 단위 벡터를 배치하고 내적을 사용하여 격자에서 최소 및 최대를 이동하는 것입니다. 따라서 먼저 임의의 부동 소수점을 임의의 벡터로 변경해야합니다. 이러한 벡터는 합리적인 불규칙한 방향 집합이며 정확하게 균일하게 만들지 않습니다.


```cpp
class perlin {
    public:
        perlin() {
            /* 추가 */
            ranvec = new vec3[point_count];
            /*******/
            for (int i = 0; i < point_count; ++i) {
                /* 수정 */
                ranvec[i] = unit_vector(vec3::random(-1,1));
                /*******/
            }

            perm_x = perlin_generate_perm();
            perm_y = perlin_generate_perm();
            perm_z = perlin_generate_perm();
        }

        ~perlin() {
            /* 추가 */
            delete[] ranvec;
            /*******/
            delete[] perm_x;
            delete[] perm_y;
            delete[] perm_z;
        }
    ...
    private:
        static const int point_count = 256;
        /* 추가 */
        vec3* ranvec;
        /*******/
        int* perm_x;
        int* perm_y;
        int* perm_z;
        ...
}
```

**목록 37 :** [perlin.h] 무작위 단위 변환이있는 Perlin

Perlin 클래스의 `noise()`메서드는 이제 다음과 같습니다.


```cpp
class perlin {
    public:
        ...
        double noise(const point3& p) const {
            /* 수정 */
            auto u = p.x() - floor(p.x());
            auto v = p.y() - floor(p.y());
            auto w = p.z() - floor(p.z());
            /*******/
            auto i = static_cast<int>(floor(p.x()));
            auto j = static_cast<int>(floor(p.y()));
            auto k = static_cast<int>(floor(p.z()));
            /* 추가 */
            vec3 c[2][2][2];
            /*******/
            for (int di=0; di < 2; di++)
                for (int dj=0; dj < 2; dj++)
                    for (int dk=0; dk < 2; dk++)
            /* 수정 */
                        c[di][dj][dk] = ranvec[
                            perm_x[(i+di) & 255] ^
                            perm_y[(j+dj) & 255] ^
                            perm_z[(k+dk) & 255]
                        ];

            return perlin_interp(c, u, v, w);
            /********/
        }
        ...
    }
```

**목록 38 :** [perlin.h] 새로운 noise () 메서드가있는 Perlin 클래스


그리고 interpolation은 조금 더 복잡해집니다.

```cpp
class perlin {
    ...
    private:
        ...
        static double perlin_interp(vec3 c[2][2][2], double u, double v, double w) {
            /* 추가 */
            auto uu = u*u*(3-2*u);
            auto vv = v*v*(3-2*v);
            auto ww = w*w*(3-2*w);
            auto accum = 0.0;

            for (int i=0; i < 2; i++)
                for (int j=0; j < 2; j++)
                    for (int k=0; k < 2; k++) {
                        vec3 weight_v(u-i, v-j, w-k);
                        accum += (i*uu + (1-i)*(1-uu))
                               * (j*vv + (1-j)*(1-vv))
                               * (k*ww + (1-k)*(1-ww))
                               * dot(c[i][j][k], weight_v);
                    }

            return accum;
            /*******/
        }
        ...
}
```

**목록 39 :** [perlin.h] 지금까지의 Perlin interpolation 함수

perlin 해석의 출력은 음수 값을 반환 할 수 있습니다. 이러한 음수 값은 감마 함수의 sqrt () 함수에 전달되어 NaN으로 변환됩니다. perlin 출력을 0과 1 사이로 다시 캐스팅합니다.


```cpp
class noise_texture : public texture {
    public:
        noise_texture() {}
        noise_texture(double sc) : scale(sc) {}

        virtual color value(double u, double v, const point3& p) const override {
            /* 수정 */
            return color(1,1,1) * 0.5 * (1.0 + noise.noise(scale * p));
            /*******/
        }

    public:
        perlin noise;
        double scale;
};
```

**목록 40 :** [texture.h] Perlin 평활화, 더 높은 빈도


이것은 마침내 더 합리적으로 보이는 것을 제공합니다.

[![img](https://raytracing.github.io/images/img-2.11-perlin-shift.png)](https://raytracing.github.io/images/img-2.11-perlin-shift.png)

*이미지 11 : Perlin 텍스처, 정수 값에서 이동*



## 5.6 난기류 소개

매우 자주, 여러 합산 된 주파수를 가진 합성 잡음이 사용됩니다. 일반적으로 난류라고하며 잡음에 대한 반복 호출의 합계입니다.


```cpp
class perlin {
    ...
    public:
        ...
        double turb(const point3& p, int depth=7) const {
            auto accum = 0.0;
            auto temp_p = p;
            auto weight = 1.0;

            for (int i = 0; i < depth; i++) {
                accum += weight*noise(temp_p);
                weight *= 0.5;
                temp_p *= 2;
            }

            return fabs(accum);
        }
        ...
```

**목록 41 :** [perlin.h] 난류 함수


여기서 `fabs()`는 <cmath>에 정의 된 절대 값 함수입니다.


```cpp
class noise_texture : public texture {
    public:
        noise_texture() {}
        noise_texture(double sc) : scale(sc) {}

        virtual color value(double u, double v, const point3& p) const override {
            /* 수정 */
            return color(1,1,1) * noise.turb(scale * p);
            /*******/
        }

    public:
        perlin noise;
        double scale;
};
```

**목록 42 :** [texture.h] 난류가있는 노이즈 텍스처


직접 사용하면 난류는 일종의 위장 그물 모양을 제공합니다.


[![img](https://raytracing.github.io/images/img-2.12-perlin-turb.png)](https://raytracing.github.io/images/img-2.12-perlin-turb.png)

*이미지 12 : 난류가있는 Perlin 텍스처*


## 5.7 위상 조정

그러나 일반적으로 난류는 간접적으로 사용됩니다. 예를 들어, 절차 적 솔리드 텍스처의 "hello world"같은 존재가 대리석과 같은 텍스처입니다. 기본 아이디어는 사인 함수와 같은 것에 비례하는 색상을 만들고 난류를 사용하여 위상을 조정하는 것입니다 (그래서 줄무늬가 물결 모양으로 만드는 𝑥 를 sin(𝑥)으로 이동). 직선 노이즈와 난류를 주석 처리하고 대리석과 같은 효과를 주는 것은 다음과 같습니다.


```cpp
class noise_texture : public texture {
    public:
        noise_texture() {}
        noise_texture(double sc) : scale(sc) {}

        virtual color value(double u, double v, const point3& p) const override {
            /* 수정 */
            return color(1,1,1) * 0.5 * (1 + sin(scale*p.z() + 10*noise.turb(p)));
            /*******/
        }

    public:
        perlin noise;
        double scale;
};
```

**목록 43 :** [texture.h] 대리석 텍스처가있는 노이즈 텍스처

결과 :

[![img](https://raytracing.github.io/images/img-2.13-perlin-marble.png)](https://raytracing.github.io/images/img-2.13-perlin-marble.png)

*이미지 13 : Perlin 노이즈, 대리석 질감*

